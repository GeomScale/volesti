// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// copula
Rcpp::NumericMatrix copula(Rcpp::Nullable<Rcpp::NumericVector> r1, Rcpp::Nullable<Rcpp::NumericVector> r2, Rcpp::Nullable<Rcpp::NumericMatrix> sigma, Rcpp::Nullable<unsigned int> m, Rcpp::Nullable<unsigned int> n);
RcppExport SEXP _volesti_copula(SEXP r1SEXP, SEXP r2SEXP, SEXP sigmaSEXP, SEXP mSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type r1(r1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type r2(r2SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type sigma(sigmaSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<unsigned int> >::type m(mSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<unsigned int> >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(copula(r1, r2, sigma, m, n));
    return rcpp_result_gen;
END_RCPP
}
// exact_vol
double exact_vol(Rcpp::Nullable<Rcpp::Reference> P);
RcppExport SEXP _volesti_exact_vol(SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::Reference> >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(exact_vol(P));
    return rcpp_result_gen;
END_RCPP
}
// frustum_of_simplex
double frustum_of_simplex(Rcpp::NumericVector a, double z0);
RcppExport SEXP _volesti_frustum_of_simplex(SEXP aSEXP, SEXP z0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type a(aSEXP);
    Rcpp::traits::input_parameter< double >::type z0(z0SEXP);
    rcpp_result_gen = Rcpp::wrap(frustum_of_simplex(a, z0));
    return rcpp_result_gen;
END_RCPP
}
// inner_ball
Rcpp::NumericVector inner_ball(Rcpp::Reference P);
RcppExport SEXP _volesti_inner_ball(SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Reference >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(inner_ball(P));
    return rcpp_result_gen;
END_RCPP
}
// poly_gen
Rcpp::NumericMatrix poly_gen(int kind_gen, bool Vpoly_gen, bool Zono_gen, int dim_gen, int m_gen);
RcppExport SEXP _volesti_poly_gen(SEXP kind_genSEXP, SEXP Vpoly_genSEXP, SEXP Zono_genSEXP, SEXP dim_genSEXP, SEXP m_genSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type kind_gen(kind_genSEXP);
    Rcpp::traits::input_parameter< bool >::type Vpoly_gen(Vpoly_genSEXP);
    Rcpp::traits::input_parameter< bool >::type Zono_gen(Zono_genSEXP);
    Rcpp::traits::input_parameter< int >::type dim_gen(dim_genSEXP);
    Rcpp::traits::input_parameter< int >::type m_gen(m_genSEXP);
    rcpp_result_gen = Rcpp::wrap(poly_gen(kind_gen, Vpoly_gen, Zono_gen, dim_gen, m_gen));
    return rcpp_result_gen;
END_RCPP
}
// rotating
Rcpp::NumericMatrix rotating(Rcpp::Reference P);
RcppExport SEXP _volesti_rotating(SEXP PSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Reference >::type P(PSEXP);
    rcpp_result_gen = Rcpp::wrap(rotating(P));
    return rcpp_result_gen;
END_RCPP
}
// rounding
Rcpp::List rounding(Rcpp::Reference P, Rcpp::Nullable<std::string> random_walk, Rcpp::Nullable<unsigned int> walk_length, Rcpp::Nullable<Rcpp::List> parameters);
RcppExport SEXP _volesti_rounding(SEXP PSEXP, SEXP random_walkSEXP, SEXP walk_lengthSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Reference >::type P(PSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type random_walk(random_walkSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<unsigned int> >::type walk_length(walk_lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(rounding(P, random_walk, walk_length, parameters));
    return rcpp_result_gen;
END_RCPP
}
// sample_points
Rcpp::NumericMatrix sample_points(Rcpp::Nullable<Rcpp::Reference> P, Rcpp::Nullable<unsigned int> N, Rcpp::Nullable<std::string> distribution, Rcpp::Nullable<std::string> random_walk, Rcpp::Nullable<unsigned int> walk_length, Rcpp::Nullable<bool> exact, Rcpp::Nullable<std::string> body, Rcpp::Nullable<Rcpp::List> parameters, Rcpp::Nullable<Rcpp::NumericVector> InnerPoint);
RcppExport SEXP _volesti_sample_points(SEXP PSEXP, SEXP NSEXP, SEXP distributionSEXP, SEXP random_walkSEXP, SEXP walk_lengthSEXP, SEXP exactSEXP, SEXP bodySEXP, SEXP parametersSEXP, SEXP InnerPointSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::Reference> >::type P(PSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<unsigned int> >::type N(NSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type distribution(distributionSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type random_walk(random_walkSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<unsigned int> >::type walk_length(walk_lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type exact(exactSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type body(bodySEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type parameters(parametersSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type InnerPoint(InnerPointSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_points(P, N, distribution, random_walk, walk_length, exact, body, parameters, InnerPoint));
    return rcpp_result_gen;
END_RCPP
}
// volume
double volume(Rcpp::Reference P, Rcpp::Nullable<unsigned int> walk_length, Rcpp::Nullable<double> error, Rcpp::Nullable<Rcpp::NumericVector> inner_ball, Rcpp::Nullable<std::string> algo, Rcpp::Nullable<std::string> random_walk, Rcpp::Nullable<bool> rounding, Rcpp::Nullable<Rcpp::List> parameters);
RcppExport SEXP _volesti_volume(SEXP PSEXP, SEXP walk_lengthSEXP, SEXP errorSEXP, SEXP inner_ballSEXP, SEXP algoSEXP, SEXP random_walkSEXP, SEXP roundingSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Reference >::type P(PSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<unsigned int> >::type walk_length(walk_lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type error(errorSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type inner_ball(inner_ballSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type algo(algoSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type random_walk(random_walkSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type rounding(roundingSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(volume(P, walk_length, error, inner_ball, algo, random_walk, rounding, parameters));
    return rcpp_result_gen;
END_RCPP
}
// zono_approx
Rcpp::List zono_approx(Rcpp::Reference Z, Rcpp::Nullable<bool> fit_ratio, Rcpp::Nullable<unsigned int> walk_length, Rcpp::Nullable<double> error, Rcpp::Nullable<Rcpp::NumericVector> inner_ball, Rcpp::Nullable<std::string> random_walk, Rcpp::Nullable<bool> rounding, Rcpp::Nullable<Rcpp::List> parameters);
RcppExport SEXP _volesti_zono_approx(SEXP ZSEXP, SEXP fit_ratioSEXP, SEXP walk_lengthSEXP, SEXP errorSEXP, SEXP inner_ballSEXP, SEXP random_walkSEXP, SEXP roundingSEXP, SEXP parametersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::Reference >::type Z(ZSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type fit_ratio(fit_ratioSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<unsigned int> >::type walk_length(walk_lengthSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<double> >::type error(errorSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericVector> >::type inner_ball(inner_ballSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<std::string> >::type random_walk(random_walkSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<bool> >::type rounding(roundingSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type parameters(parametersSEXP);
    rcpp_result_gen = Rcpp::wrap(zono_approx(Z, fit_ratio, walk_length, error, inner_ball, random_walk, rounding, parameters));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _rcpp_module_boot_yada();

static const R_CallMethodDef CallEntries[] = {
    {"_volesti_copula", (DL_FUNC) &_volesti_copula, 5},
    {"_volesti_exact_vol", (DL_FUNC) &_volesti_exact_vol, 1},
    {"_volesti_frustum_of_simplex", (DL_FUNC) &_volesti_frustum_of_simplex, 2},
    {"_volesti_inner_ball", (DL_FUNC) &_volesti_inner_ball, 1},
    {"_volesti_poly_gen", (DL_FUNC) &_volesti_poly_gen, 5},
    {"_volesti_rotating", (DL_FUNC) &_volesti_rotating, 1},
    {"_volesti_rounding", (DL_FUNC) &_volesti_rounding, 4},
    {"_volesti_sample_points", (DL_FUNC) &_volesti_sample_points, 9},
    {"_volesti_volume", (DL_FUNC) &_volesti_volume, 8},
    {"_volesti_zono_approx", (DL_FUNC) &_volesti_zono_approx, 8},
    {"_rcpp_module_boot_yada", (DL_FUNC) &_rcpp_module_boot_yada, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_volesti(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
